plugins {
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'net.researchgate.release' version '2.7.0'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.sonarqube' version '2.6.2'
    id 'nebula.ospackage' version '4.9.1'
}

ext {

    /* Dependencies */
    activationApiVersion = '1.2.0'
    activeMqVersion = '5.15.4'
    camelVersion = '2.21.1'
    commonsCodecVersion = '1.11'
    commonsCollectionsVersion = '4.1'
    commonsIoVersion = '2.6'
    commonsLangVersion = '3.7'
    commonsRdfVersion = '0.5.0'
    dropwizardVersion = '1.3.3'
    jacksonVersion = '2.9.5'
    javaxAnnotationsVersion = '1.3.2'
    javaxInjectVersion = '2.5.0-b61'
    javaxJsonVersion = '1.1.2'
    jaxbVersion = '2.3.0'
    jaxrsVersion = '2.1'
    jenaVersion = '3.7.0'
    jerseyVersion = '2.27'
    jmsApiVersion = '2.0.1'
    jsonldVersion = '0.12.0'
    jwtVersion = '0.9.0'
    kafkaVersion = '1.1.0'
    metricsVersion = '4.0.2'
    mustacheVersion = '0.9.5'
    rabbitMqVersion = '5.2.0'
    slf4jVersion = '1.7.25'
    tamayaVersion = '0.3-incubating'

    /* Testing */
    apiguardianVersion = '1.0.0'
    awaitilityVersion = '3.1.0'
    bouncycastleVersion = '1.59'
    commonsTextVersion = '1.3'
    guavaVersion = '25.1-jre'
    jsonVersion = '1.1.2'
    junitVersion = '5.2.0'
    logbackVersion = '1.2.3'
    mockitoVersion = '2.18.3'
    xercesVersion = '2.11.0'

    /* OSGi */
    asmVersion = '6.1.1'
    jenaVersionRange = '[3.7,4)'
    kafkaOsgiVersion = "${kafkaVersion}_1"
    karafVersion = '4.2.0'
    osgiVersion = '6.0.0'
    osgiCompendiumVersion = '5.0.0'
    paxExamVersion = '4.11.0'
    projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")
    spiflyVersion = '1.0.10'
    // ActiveMQ requires Spring4, but Karaf 4.2 includes Spring5, so this forces an earlier spring dependency
    springFeatureVersion = '4.1.0'

    jacocoTestProjects = [
            'trellis-agent',
            'trellis-amqp',
            'trellis-api',
            'trellis-app',
            'trellis-app-triplestore',
            'trellis-audit',
            'trellis-constraint-rules',
            'trellis-event-serialization',
            'trellis-file',
            'trellis-http',
            'trellis-id',
            'trellis-io-jena',
            'trellis-jms',
            'trellis-kafka',
            'trellis-namespaces',
            'trellis-osgi',
            'trellis-rdfa',
            'trellis-triplestore',
            'trellis-vocabulary',
            'trellis-webac',
            'trellis-webapp'
    ]
}

allprojects { subproj ->

    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    ext {
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org'
        docURL = 'https://trellis-ldp.github.io/trellis/apidocs/'
        license = 'Apache 2'

        jacocoVersion = '0.8.1'
        checkstyleVersion = '8.10'
    }

    jacoco.toolVersion = jacocoVersion

    group = 'org.trellisldp'

    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testImplementation("org.apiguardian:apiguardian-api:${apiguardianVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            requireBranch = 'master'
            signTag = true
        }
    }
}

subprojects { subproj ->

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    jar {
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    processResources {
        outputs.upToDateWhen { false }
        filesMatching(['**/features.xml', '**/banner.txt']) {
            expand project.properties
        }
    }

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories.mavenDeployer {
            def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : ""
            def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : ""
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                packaging 'jar'
                url 'https://www.trellisldp.org'
                inceptionYear '2017'
                name 'Trellis Linked Data Server'
                description 'The core components for a Trellis linked data server'

                organization {
                    name project.vendor
                    url project.homepage
                }

                developers {
                    developer {
                        id 'acoburn'
                        name 'Aaron Coburn'
                        email 'acoburn (at) apache (dot) org'
                        organization = 'Trellis LDP'
                        organizationUrl 'https://www.trellisldp.org'
                        roles {
                            role 'developer'
                        }
                        timezone '-5'
                    }
                }

                scm {
                    connection 'scm:git:git://github.com/trellis-ldp/trellis.git'
                    developerConnection 'scm:git:git@github.com/trellis-ldp/trellis.git'
                    url 'https://github.com/trellis-ldp/trellis'
                    tag 'HEAD'
                }

                licenses {
                    license {
                        name 'Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0'
                        comments 'Copyright (c) 2017-2018 Trellis LDP'
                    }
                }
            }
        }
    }

    task docs(type: Javadoc) {
        outputs.upToDateWhen { false }
        source sourceSets.main.allJava
        classpath = files(sourceSets.main.compileClasspath)
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://trellis-ldp.github.io/trellis/apidocs/'
            links 'https://commons.apache.org/proper/commons-lang/javadocs/api-3.7/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://activemq.apache.org/maven/5.15.4/apidocs/'
            links 'https://jena.apache.org/documentation/javadoc/rdfconnection/'
            links 'https://kafka.apache.org/0100/javadoc/'
            links 'https://rabbitmq.github.io/rabbitmq-java-client/api/current/'
            links 'https://metrics.dropwizard.io/4.0.0/apidocs/'
            links 'https://www.dropwizard.io/1.3.0/dropwizard-core/apidocs/'
        }
    }

    sonarqube {
        skipProject = JavaVersion.current().isJava10Compatible()
    }

    test {
        useJUnitPlatform()
        jacoco {
            enabled = ! JavaVersion.current().isJava11Compatible()
        }
    }

    afterReleaseBuild.dependsOn docs
    afterReleaseBuild.dependsOn uploadArchives

    afterEvaluate {
        if (subproj.name in jacocoTestProjects) {
            jacoco {
                applyTo subproj.tasks.matching { it.name == 'junitPlatformTest' }
            }
        }
    }
}

configure(rootProject) {

    task apidocs(type: Javadoc, dependsOn: getTasksByName('docs', true)) {
        outputs.upToDateWhen { false }
        destinationDir = new File(projectDir, "docs/apidocs")
        title = "Trellis Linked Data Server Documentation"
        exclude '**/impl/*'
        exclude '**/*Tests.java'
        options {
            memberLevel = JavadocMemberLevel.PUBLIC
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://trellis-ldp.github.io/trellis/apidocs/'
            links 'https://commons.apache.org/proper/commons-lang/javadocs/api-3.7/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://activemq.apache.org/maven/5.15.4/apidocs/'
            links 'https://jena.apache.org/documentation/javadoc/rdfconnection/'
            links 'https://kafka.apache.org/0100/javadoc/'
            links 'https://rabbitmq.github.io/rabbitmq-java-client/api/current/'
            links 'https://metrics.dropwizard.io/4.0.0/apidocs/'
            links 'https://www.dropwizard.io/1.3.0/dropwizard-core/apidocs/'
        }

        source subprojects.collect { project -> project.sourceSets.main.allJava }
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    }

    sonarqube {
        properties {
            property "sonar.projectName", "Trellis Linked Data Server"
            property "sonar.projectKey", "org.trellisldp:trellis"
            property "sonar.links.homepage", "https://www.trellisldp.org"
            property "sonar.links.issue", "https://github.com/trellis-ldp/trellis/issues"
            property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis.git"
        }
    }

    // Ignore alpha, beta, milestone and release candidates
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release Candidate")
                }
            }
        }
    }

    task jacocoMerge(type: JacocoMerge) {
        subprojects.findAll { it.name in jacocoTestProjects }
                .each { subproj ->
            executionData fileTree(dir: "${subproj.buildDir}/jacoco", include: '*.exec')
            dependsOn subproj.tasks.withType(Test)
        }
    }

    task jacocoRootReport(type: JacocoReport, dependsOn: jacocoMerge) {
        sourceDirectories = files(subprojects
                .findAll { it.name in jacocoTestProjects }
                .sourceSets.main.allSource.srcDirs)
        classDirectories = files(subprojects
                .findAll { it.name in jacocoTestProjects }
                .sourceSets.main.output)
        executionData jacocoMerge.destinationFile
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }

    tasks.coveralls {
        dependsOn 'jacocoRootReport'
    }
}
