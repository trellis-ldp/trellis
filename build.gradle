plugins {
    id 'com.github.ben-manes.versions' version '0.22.0'
    id 'com.github.hierynomus.license' version '0.15.0'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'com.gradle.build-scan' version '2.4.1'
    id 'net.researchgate.release' version '2.8.1'
    id 'org.owasp.dependencycheck' version '5.2.1'
    id 'org.sonarqube' version '2.7.1'
    id 'biz.aQute.bnd.builder' version '4.1.0' apply false
    id 'com.palantir.docker' version '0.22.1' apply false
    id 'nebula.ospackage' version '6.2.1' apply false
    id "net.wasdev.wlp.gradle.plugins.Liberty" version "2.6.5" apply false
}

ext {

    /* Core dependencies */
    commonsCodecVersion = '1.13'
    commonsIoVersion = '2.6'
    commonsLangVersion = '3.9'
    commonsRdfVersion = '0.5.0'
    javaxAnnotationsVersion = '1.3.2'
    javaxInjectVersion = '1'
    javaxJmsVersion = '2.0.1'
    javaxManagementVersion = '1.1.2'
    jaxrsVersion = '2.1.1'
    microprofileConfigVersion = '1.3'
    microprofileHealthVersion = '2.0.1'
    microprofileMetricsVersion = '2.0.1'
    microprofileReactiveMessagingVersion = '1.0'
    slf4jVersion = '1.7.28'

    /* Wiring */
    cdiApiVersion = '2.0.SP1'

    /* Component dependencies */
    activationApiVersion = '1.2.0'
    activeMqVersion = '5.15.9'
    commonsCompressVersion = '1.18'
    dropwizardVersion = '1.3.13'
    guavaVersion = '28.0-jre'
    jacksonVersion = '2.9.9'
    jaxbVersion = '2.4.0-b180830.0359'
    jenaVersion = '3.12.0'
    // version 2.28+ uses the jakarta-based jax-rs API
    jerseyVersion = '2.27'
    jjwtVersion = '0.10.7'
    jmsApiVersion = '2.0.1'
    jsonldVersion = '0.12.4'
    kafkaVersion = '2.3.0'
    mustacheVersion = '0.9.6'
    rabbitMqVersion = '5.7.3'
    rxjavaVersion = '2.2.12'
    validationVersion = '2.0.1.Final'

    /* Testing */
    apiguardianVersion = '1.1.0'
    awaitilityVersion = '3.1.6'
    bouncycastleVersion = '1.62'
    commonsTextVersion = '1.7'
    cxfVersion = '3.3.2'
    junitVersion = '5.5.1'
    junitLauncherVersion = '1.5.1'
    hamcrestVersion = '2.1'
    logbackVersion = '1.2.3'
    mockitoVersion = '3.0.0'
    qpidVersion = '7.1.4'
    sleepycatVersion = '18.3.12'
    smallryeConfigVersion = '1.3.9'
    smallryeHealthVersion = '2.0.0'
    smallryeReactiveVersion = '1.0.1'
    smallryeReactiveOperatorsVersion = '1.0.9'
    weldVersion = '2.0.0.Final'

    /* OSGi */
    glassfishInjectVersion = '2.5.0-b62'
    jaxbOsgiVersion = '2.3.0'
    javaxElVersion = '2.2.5'
    javaxInterceptorVersion = '1.2.2'
    jenaOsgiVersion = '3.11.0'
    jenaVersionRange = '[3.11,4)'
    kafkaOsgiVersion = '2.2.0_1'
    karafVersion = '4.2.6'
    mustacheOsgiVersion = '0.9.6_1'
    osgiVersion = '6.0.0'
    osgiCompendiumVersion = '5.0.0'
    paxExamVersion = '4.13.1'
    spiflyVersion = '1.2.3'
    // ActiveMQ requires Spring4, but Karaf 4.2 includes Spring5, so this forces an earlier spring dependency
    springFeatureVersion = '4.1.0'

    jacocoTestProjects = [
            'trellis-agent',
            'trellis-amqp',
            'trellis-api',
            'trellis-app',
            'trellis-app-triplestore',
            'trellis-auth-oauth',
            'trellis-auth-basic',
            'trellis-audit',
            'trellis-constraint-rules',
            'trellis-event-serialization',
            'trellis-file',
            'trellis-http',
            'trellis-io-jena',
            'trellis-jms',
            'trellis-kafka',
            'trellis-namespaces',
            'trellis-rdfa',
            'trellis-triplestore',
            'trellis-vocabulary',
            'trellis-webac',
            'trellis-webdav'
    ]

    omitFromMavenPublishing = [
        'trellis-server',
        'trellis-osgi'
    ]
}

allprojects { subproj ->

    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    ext {
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org'
        docURL = 'https://www.trellisldp.org/docs/trellis/current/apidocs/'
        license = 'Apache 2'

        jacocoVersion = '0.8.4'
        checkstyleVersion = '8.18'
    }

    jacoco.toolVersion = jacocoVersion

    group = 'org.trellisldp'

    repositories {
        mavenCentral()
        jcenter()
        mavenLocal()
    }

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
        testImplementation("org.apiguardian:apiguardian-api:${apiguardianVersion}")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
        testRuntime("org.junit.platform:junit-platform-launcher:${junitLauncherVersion}")
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            /* Note: for maintenance branches, change this to the appropriate branch name. */
            requireBranch = 'master'
            signTag = true
        }
    }

    configurations.all {
        if (JavaVersion.current().isJava11Compatible() && subproj.hasProperty("jpms")) {
            exclude group: 'commons-logging', module: 'commons-logging'
        }
        resolutionStrategy.dependencySubstitution {
            substitute module("org.apache.geronimo.specs:geronimo-annotation_1.2_spec") with module ("javax.annotation:javax.annotation-api:$javaxAnnotationsVersion")
            substitute module("org.apache.geronimo.specs:geronimo-jms_1.1_spec") with module("javax.jms:javax.jms-api:$javaxJmsVersion")
            substitute module("org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec") with module("javax.management.j2ee:javax.management.j2ee-api:$javaxManagementVersion")
            substitute module("jakarta.xml.bind:jakarta.xml.bind-api") with module("javax.xml.bind:jaxb-api:$jaxbVersion")
        }
        /*
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group.startsWith('com.fasterxml.jackson.')) {
                details.useVersion jacksonVersion
                details.because 'Jackson modules should use a consistent version'
            }
        }
        */
    }
}

subprojects { subproj ->

    def jpms = JavaVersion.current().isJava11Compatible() && subproj.hasProperty("jpms") &&
            sourceSets.main.allJava.getFiles().stream().map { file -> file.getName() }
                    .anyMatch { file -> file == "module-info.java"}

    sourceCompatibility = jpms ? 11 : 8
    targetCompatibility = jpms ? 11 : 8

    afterEvaluate {
        if (jpms) {
            compileJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                        '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }
            compileTestJava {
                inputs.property("moduleName", moduleName)
                def mods = subproj.ext.has("testModules") ? subproj.ext.get("testModules") : []
                mods.add('org.junit.jupiter.api')
                doFirst {
                    options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', mods.join(','),
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                    ]
                    mods.forEach { mod -> options.compilerArgs += [ '--add-reads', "$moduleName=$mod"] }
                    classpath = files()
                }
            }
            test {
                inputs.property("moduleName", moduleName)
                def mods = subproj.ext.has("testModules") ? subproj.ext.get("testModules") : []
                mods.add('org.junit.jupiter.api')
                doFirst {
                    jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-opens', "$moduleName/$moduleName=org.junit.platform.commons",
                        '--add-opens', "$moduleName/$moduleName=org.mockito",
                        '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir, sourceSets.test.output).asPath,
                    ]
                    mods.forEach { mod -> jvmArgs += [ '--add-reads', "$moduleName=$mod"] }
                    classpath = files()
                }
            }

            javadoc {
                options.addStringOption('-module-path', classpath.asPath)
            }
        }
    }

    sourceSets {
        main {
            java {
                if (!jpms) {
                    exclude '**/module-info.java'
                }
            }
        }
    }

    jar {
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
    }

    test {
        useJUnitPlatform()
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                pom {
                    packaging = 'jar'
                    url = 'https://www.trellisldp.org'
                    inceptionYear = '2017'
                    name = 'Trellis Linked Data Server'
                    description = 'The core components for a Trellis linked data server'

                    organization {
                        name = project.vendor
                        url = project.homepage
                    }

                    developers {
                        developer {
                            id = 'acoburn'
                            name = 'Aaron Coburn'
                            email = 'acoburn (at) apache (dot) org'
                        }
                    }

                    scm {
                        url = 'https://github.com/trellis-ldp/trellis'
                        connection = 'scm:git:https://github.com/trellis-ldp/trellis.git'
                        developerConnection = 'scm:git:git@github.com:trellis-ldp/trellis.git'
                        tag = 'HEAD'
                    }

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0'
                            comments = 'Copyright (c) 2017-2019 Trellis LDP'
                        }
                    }

                }
                pom.withXml {
                    // eliminate test-scoped dependencies
                    asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                }

                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }

                artifact(javadocJar) {
                    classifier = 'javadoc'
                }
            }
        }
        repositories {
            maven {
                def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("SONATYPE_USERNAME") ?: ""
                def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("SONATYPE_PASSWORD") ?: ""
                if (version.endsWith("SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    tasks.withType(PublishToMavenRepository) {
        onlyIf {
            ! omitFromMavenPublishing.contains(subproj.name)
        }
    }
    tasks.withType(PublishToMavenLocal) {
        onlyIf {
            ! omitFromMavenPublishing.contains(subproj.name)
        }
    }
    task install(dependsOn: [assemble, publishToMavenLocal])
    task upload(dependsOn: [assemble, publish])

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications
    }

    processResources {
        outputs.upToDateWhen { false }
        filesMatching(['**/features.xml', '**/banner.txt']) {
            expand project.properties
        }
    }

    task docs(type: Javadoc) {
        outputs.upToDateWhen { false }
        source sourceSets.main.allJava
        classpath = files(sourceSets.main.compileClasspath)
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://commons.apache.org/proper/commons-codec/apidocs/'
            links 'https://activemq.apache.org/maven/apidocs/'
            links 'https://jena.apache.org/documentation/javadoc/rdfconnection/'
            links 'https://kafka.apache.org/20/javadoc/'
            links 'https://rabbitmq.github.io/rabbitmq-java-client/api/current/'
            links 'https://www.dropwizard.io/1.3.5/dropwizard-core/apidocs/'
        }

        if (JavaVersion.current().isJava11Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    javadoc {
        options.tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]

        if (JavaVersion.current().isJava11Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    sonarqube {
        skipProject = JavaVersion.current().isJava10Compatible()
    }

    afterReleaseBuild.dependsOn docs
    afterReleaseBuild.dependsOn publish
    afterReleaseBuild.dependsOn assemble

    afterEvaluate {
        if (subproj.name in jacocoTestProjects) {
            jacoco {
                applyTo subproj.tasks.matching { it.name == 'junitPlatformTest' }
            }
        }
    }
}

configure(rootProject) {

    task apidocs(type: Javadoc, dependsOn: getTasksByName('docs', true)) {
        failOnError false
        outputs.upToDateWhen { false }
        destinationDir = new File(projectDir, "docs/apidocs/${project.version}")
        title = "Trellis Linked Data Server Documentation"
        exclude '**/impl/*'
        exclude '**/*Tests.java'
        options {
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            memberLevel = JavadocMemberLevel.PUBLIC
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://commons.apache.org/proper/commons-codec/apidocs/'
            links 'https://activemq.apache.org/maven/apidocs/'
            links 'https://jena.apache.org/documentation/javadoc/rdfconnection/'
            links 'https://kafka.apache.org/20/javadoc/'
            links 'https://rabbitmq.github.io/rabbitmq-java-client/api/current/'
            links 'https://www.dropwizard.io/1.3.5/dropwizard-core/apidocs/'
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        source subprojects.collect { project -> project.sourceSets.main.allJava }
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    }

    sonarqube {
        properties {
            property "sonar.projectName", "Trellis Linked Data Server"
            property "sonar.projectKey", "org.trellisldp:trellis"
            property "sonar.links.homepage", "https://www.trellisldp.org"
            property "sonar.links.issue", "https://github.com/trellis-ldp/trellis/issues"
            property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis.git"
        }
    }

    // Ignore alpha, beta, milestone and release candidates
    dependencyUpdates.resolutionStrategy = {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'rc', 'm'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release Candidate")
                }
            }
        }
    }

    task jacocoMerge(type: JacocoMerge) {
        subprojects.findAll { it.name in jacocoTestProjects }
                .each { subproj ->
            executionData fileTree(dir: "${subproj.buildDir}/jacoco", include: '*.exec')
            dependsOn subproj.tasks.withType(Test)
        }
    }

    task jacocoRootReport(type: JacocoReport, dependsOn: jacocoMerge) {
        sourceDirectories.from(files(subprojects
                .findAll { it.name in jacocoTestProjects }
                .sourceSets.main.allSource.srcDirs))
        classDirectories.from(files(subprojects
                .findAll { it.name in jacocoTestProjects }
                .sourceSets.main.output))
        executionData jacocoMerge.destinationFile
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }

    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }

    tasks.coveralls {
        dependsOn 'jacocoRootReport'
    }

    task getVersion {
        doLast {
            println project.version
        }
    }
}
