buildscript {
    repositories {
        mavenCentral()
    }
    configurations.maybeCreate('pitest')
    dependencies {
        pitest "org.pitest:pitest-junit5-plugin:0.12"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version "0.28.0"
    id 'com.github.hierynomus.license' version "0.15.0"
    id 'com.github.kt3k.coveralls' version "2.10.1"
    id 'net.researchgate.release' version "2.8.1"
    id 'org.gradle.test-retry' version "1.1.5"
    id 'org.owasp.dependencycheck' version "5.3.2.1"
    id 'org.sonarqube' version "2.8"
}

ext {
    // Core dependencies
    commonsCodecVersion = "1.14"
    commonsIoVersion = "2.6"
    commonsLangVersion = "3.10"
    commonsRdfVersion = "0.5.0"
    slf4jVersion = "1.7.30"

    // JavaEE
    activationApiVersion = "1.2.2"
    annotationApiVersion = "1.3.5"
    cdiApiVersion = "2.0.2"
    injectApiVersion = "1.0.1"
    jaxbApiVersion = "2.3.3"
    jaxrsApiVersion = "2.1.6"
    jmsApiVersion = "2.0.3"
    jsonApiVersion = "1.1.6"
    jsonbApiVersion = "1.0.2"
    managementApiVersion = "1.1.4"
    validationApiVersion = "2.0.2"

    // MicroProfile
    microprofileConfigVersion = "1.4"
    microprofileHealthVersion = "2.2"
    microprofileMetricsVersion = "2.3.1"
    microprofileJwtVersion = "1.1.1"
    microprofileOpenapiVersion = "1.1.2"
    microprofileReactiveMessagingVersion = "1.0"

    // Component dependencies
    activeMqVersion = "5.15.12"
    dropwizardVersion = "2.0.9"
    guavaVersion = "29.0-jre"
    jacksonVersion = "2.11.0"
    jenaVersion = "3.14.0"
    jjwtVersion = "0.11.1"
    jsonldVersion = "0.13.0"
    kafkaVersion = "2.5.0"
    mustacheVersion = "0.9.6"
    nettyVersion = "4.1.49.Final"
    quarkusVersion = "1.4.2.Final"
    rabbitMqVersion = "5.9.0"
    rxjavaVersion = "2.2.19"

    // Transitive dependencies
    snakeyamlVersion = "1.26"

    // Testing
    apiguardianVersion = "1.1.0"
    awaitilityVersion = "4.0.2"
    bouncycastleVersion = "1.65"
    commonsTextVersion = "1.8"
    cxfVersion = "3.3.6"
    glassfishJaxbVersion = "2.3.3"
    jerseyVersion = "2.30.1"
    junitVersion = "5.6.2"
    junitLauncherVersion = "1.6.2"
    hamcrestVersion = "2.2"
    logbackVersion = "1.2.3"
    mockitoVersion = "3.3.3"
    qpidVersion = "8.0.0"
    sleepycatVersion = "18.3.12"
    smallryeConfigVersion = "1.7.0"
    smallryeHealthVersion = "2.2.1"
    smallryeJwtVersion = "2.1.1"
    smallryeReactiveVersion = "1.0.8"
    smallryeReactiveOperatorsVersion = "1.0.12"
    weldVersion = "2.0.1.Final"
    yassonVersion = "1.0.7"

    // Tooling
    jacocoToolVersion = "0.8.5"
    checkstyleToolVersion = "8.31"
    pitestToolVersion = "1.5.1"
    pmdToolVersion = "6.22.0"

    // OSGi
    commonsCompressVersion = "1.20"
    elVersion = "3.0.3"
    failureaccessVersion = "1.0.1"
    interceptorVersion = "1.2.5"
    jenaOsgiVersion = "3.13.1"
    jenaVersionRange = "[3.13,4)"
    kafkaOsgiVersion = "2.3.1_1"
    karafVersion = "4.2.8"
    mustacheOsgiVersion = "0.9.6_1"
    osgiVersion = "6.0.0"
    osgiCompendiumVersion = "5.0.0"
    paxExamVersion = "4.13.3"
    spiflyVersion = "1.2.3"
    // Note: ActiveMQ requires Spring4, but Karaf 4.2 includes Spring5, so this forces an earlier spring dependency
    springFeatureVersion = "4.1.0"

    omitFromJacocoReporting = [
        'trellis-bom',
        'trellis-karaf',
        'trellis-openliberty',
        'trellis-osgi',
        'trellis-test'
    ]

    omitFromMavenPublishing = [
        'trellis-dropwizard-triplestore',
        'trellis-osgi',
        'trellis-quarkus',
        'trellis-openliberty'
    ]
}

allprojects { subproj ->

    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'org.gradle.test-retry'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'pmd'
    apply plugin: 'signing'

    ext {
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org/'
        docURL = 'https://www.trellisldp.org/docs/trellis/current/apidocs/'
        license = 'Apache-2.0'

    }

    jacoco.toolVersion = jacocoToolVersion

    group = 'org.trellisldp'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.apiguardian:apiguardian-api:${apiguardianVersion}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitLauncherVersion}"
    }

    dependencyCheck {
        analyzers {
            assemblyEnabled = false
            retirejs {
                enabled = false
            }
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }

    release {
        tagTemplate = '$name-$version'
        git {
            /* Note: for maintenance branches, change this to the appropriate branch name. */
            requireBranch = 'master'
            signTag = true
        }
    }

    configurations.all {
        if (JavaVersion.current().isJava11Compatible() && subproj.hasProperty("jpms")) {
            exclude group: 'commons-logging', module: 'commons-logging'
            exclude group: 'com.google.code.findbugs', module: 'jsr305'
        }
        resolutionStrategy {
            // use managed version until jackson-dataformat-yaml updates dependency
            force "org.yaml:snakeyaml:$snakeyamlVersion"
        }
        resolutionStrategy.dependencySubstitution {
            substitute module("org.apache.geronimo.specs:geronimo-annotation_1.2_spec") with module ("jakarta.annotation:jakarta.annotation-api:$annotationApiVersion")
            substitute module("org.apache.geronimo.specs:geronimo-jms_1.1_spec") with module("jakarta.jms:jakarta.jms-api:$jmsApiVersion")
            substitute module("org.apache.geronimo.specs:geronimo-j2ee-management_1.1_spec") with module("jakarta.management.j2ee:jakarta.management.j2ee-api:$managementApiVersion")
            substitute module("org.glassfish.hk2.external:jakarta.inject") with module("jakarta.inject:jakarta.inject-api:$injectApiVersion")
            substitute module("javax.enterprise:cdi-api") with module("jakarta.enterprise:jakarta.enterprise.cdi-api:$cdiApiVersion")
            substitute module("javax.annotation:javax.annotation-api") with module("jakarta.annotation:jakarta.annotation-api:$annotationApiVersion")
            substitute module("javax.inject:javax.inject") with module("jakarta.inject:jakarta.inject-api:$injectApiVersion")
        }
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group.startsWith('com.fasterxml.jackson.')) {
                details.useVersion jacksonVersion
                details.because 'Jackson modules should use a consistent version'
            }
        }
    }
}

subprojects { subproj ->

    def jpms = JavaVersion.current().isJava11Compatible() && subproj.hasProperty("jpms") &&
            sourceSets.main.allJava.getFiles().stream().map { file -> file.getName() }
                    .anyMatch { file -> file == "module-info.java"}

    sourceCompatibility = jpms ? 11 : 8
    targetCompatibility = jpms ? 11 : 8

    afterEvaluate {
        if (jpms) {
            compileJava {
                inputs.property("moduleName", moduleName)
                doFirst {
                    options.compilerArgs = [
                        '--module-path', classpath.asPath,
                    ]
                    classpath = files()
                }
            }
            compileTestJava {
                inputs.property("moduleName", moduleName)
                def mods = subproj.ext.has("testModules") ? subproj.ext.get("testModules") : []
                mods.add('org.junit.jupiter.api')
                doFirst {
                    options.compilerArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', mods.join(','),
                        '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                    ]
                    mods.forEach { mod -> options.compilerArgs += [ '--add-reads', "$moduleName=$mod"] }
                    classpath = files()
                }
            }
            test {
                inputs.property("moduleName", moduleName)
                def mods = subproj.ext.has("testModules") ? subproj.ext.get("testModules") : []
                mods.add('org.junit.jupiter.api')
                doFirst {
                    jvmArgs = [
                        '--module-path', classpath.asPath,
                        '--add-modules', 'ALL-MODULE-PATH',
                        '--add-opens', "$moduleName/$moduleName=org.junit.platform.commons",
                        '--add-opens', "$moduleName/$moduleName=org.mockito",
                        '--patch-module', "$moduleName=" + files(sourceSets.main.output.resourcesDir, sourceSets.test.output).asPath,
                    ]
                    mods.forEach { mod -> jvmArgs += [ '--add-reads', "$moduleName=$mod"] }
                    classpath = files()
                }
            }

            javadoc {
                options.addStringOption('-module-path', classpath.asPath)
            }
        }
    }

    sourceSets {
        main {
            java {
                if (!jpms) {
                    exclude '**/module-info.java'
                }
            }
        }
    }

    jar {
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            exceptionFormat "full"
            showStackTraces false
        }
        retry {
            maxRetries = (project.findProperty("trellis.test.retry") ?: "3").toInteger()
            maxFailures = 20
        }
    }

    pmd {
        ignoreFailures = true
        consoleOutput = true
        incrementalAnalysis = true
        toolVersion = pmdToolVersion
        sourceSets = [sourceSets.main]
        rulePriority = 4
        ruleSets = []
        ruleSetConfig = resources.text.fromFile(rootProject.file('buildtools/src/main/resources/pmd/pmd.xml'))
    }

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleToolVersion
    }

    task javadocJar(type: Jar) {
        classifier 'javadoc'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from javadoc
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from("$rootDir/LICENSE") {
            into "META-INF"
        }
        from sourceSets.main.allSource
    }

    task processConfig(type: Copy) {
        from('src/main/cfg') {
            include '**/*.cfg'
        }
        into 'build/cfg/main'
    }

    classes {
        classes.dependsOn processConfig
    }

    artifacts {
        archives javadocJar
        archives sourceJar
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    downloadLicenses {
        includeProjectDependencies = true
        dependencyConfiguration = 'compileClasspath'
    }

    publishing {
        publications {
            maven(MavenPublication) {
                pom {
                    packaging = 'jar'
                    url = 'https://www.trellisldp.org'
                    inceptionYear = '2017'
                    name = 'Trellis Linked Data Server'
                    description = 'The core components for a Trellis linked data server'

                    organization {
                        name = project.vendor
                        url = project.homepage
                    }

                    developers {
                        developer {
                            id = 'acoburn'
                            name = 'Aaron Coburn'
                            email = 'acoburn (at) apache (dot) org'
                        }
                    }

                    scm {
                        url = 'https://github.com/trellis-ldp/trellis'
                        connection = 'scm:git:https://github.com/trellis-ldp/trellis.git'
                        developerConnection = 'scm:git:git@github.com:trellis-ldp/trellis.git'
                        tag = 'HEAD'
                    }

                    licenses {
                        license {
                            name = 'Apache-2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            comments = 'Copyright (c) 2017 - 2020 Aaron Coburn and individual contributors'
                            distribution = 'repo'
                        }
                    }

                }
                pom.withXml {
                    // eliminate test-scoped dependencies
                    asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                    // use provided scope for JavaEE dependencies
                    asNode().dependencies.each {
                        deps -> deps.findAll { dep -> dep.groupId[0].text().startsWith("jakarta.") }
                                    .each { dep -> dep.scope[0].value = "provided" } }
                }

                from components.java

                artifact(sourceJar) {
                    classifier = 'sources'
                }

                artifact(javadocJar) {
                    classifier = 'javadoc'
                }
            }
        }
        repositories {
            maven {
                def sonatypeUsername = project.hasProperty('ossrhUsername') ? ossrhUsername : System.getenv("SONATYPE_USERNAME") ?: ""
                def sonatypePassword = project.hasProperty('ossrhPassword') ? ossrhPassword : System.getenv("SONATYPE_PASSWORD") ?: ""
                if (version.endsWith("SNAPSHOT")) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                }
                credentials {
                    username sonatypeUsername
                    password sonatypePassword
                }
            }
        }
    }

    tasks.withType(PublishToMavenRepository) {
        onlyIf {
            ! omitFromMavenPublishing.contains(subproj.name)
        }
    }
    tasks.withType(PublishToMavenLocal) {
        onlyIf {
            ! omitFromMavenPublishing.contains(subproj.name)
        }
    }
    task install(dependsOn: [assemble, publishToMavenLocal])
    task upload(dependsOn: [assemble, publish])

    signing {
        required { !version.endsWith("SNAPSHOT") && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications
    }

    tasks.withType(Sign) {
        onlyIf { !version.endsWith("SNAPSHOT") }
    }

    processResources {
        outputs.upToDateWhen { false }
        filesMatching(['**/features.xml', '**/banner.txt']) {
            expand project.properties
        }
    }

    task docs(type: Javadoc) {
        outputs.upToDateWhen { false }
        source sourceSets.main.allJava
        classpath = files(sourceSets.main.compileClasspath)
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://javaee.github.io/javaee-spec/javadocs/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://commons.apache.org/proper/commons-codec/apidocs/'
            links 'https://activemq.apache.org/maven/apidocs/'
            links 'https://jena.apache.org/documentation/javadoc/rdfconnection/'
            links 'https://kafka.apache.org/20/javadoc/'
        }

        if (JavaVersion.current().isJava11Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    javadoc {
        options.tags = ["apiNote:a:API Note:",
                "implSpec:a:Implementation Requirements:",
                "implNote:a:Implementation Note:"]

        if (JavaVersion.current().isJava11Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }

    sonarqube {
        skipProject = JavaVersion.current().isJava10Compatible()
    }

    afterReleaseBuild.dependsOn docs
    afterReleaseBuild.dependsOn publish
    afterReleaseBuild.dependsOn assemble

    afterEvaluate {
        if (! omitFromJacocoReporting.contains(subproj.name)) {
            jacoco {
                applyTo subproj.tasks.matching { it.name == 'junitPlatformTest' }
            }
        }
    }
}

configure(rootProject) {

    task apidocs(type: Javadoc, dependsOn: getTasksByName('docs', true)) {
        failOnError false
        outputs.upToDateWhen { false }
        destinationDir = new File(projectDir, "docs/apidocs/${project.version}")
        title = "Trellis Linked Data Server Documentation"
        exclude '**/impl/*'
        exclude '**/*Tests.java'
        options {
            tags = ["apiNote:a:API Note:",
                    "implSpec:a:Implementation Requirements:",
                    "implNote:a:Implementation Note:"]
            memberLevel = JavadocMemberLevel.PUBLIC
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://javaee.github.io/javaee-spec/javadocs/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
            links 'https://commons.apache.org/proper/commons-codec/apidocs/'
            links 'https://activemq.apache.org/maven/apidocs/'
            links 'https://jena.apache.org/documentation/javadoc/rdfconnection/'
            links 'https://kafka.apache.org/20/javadoc/'
        }

        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        source subprojects.collect { project -> project.sourceSets.main.allJava }
        classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })
    }

    sonarqube {
        properties {
            property "sonar.projectName", "Trellis Linked Data Server"
            property "sonar.projectKey", "org.trellisldp:trellis"
            property "sonar.links.homepage", "https://www.trellisldp.org"
            property "sonar.links.issue", "https://github.com/trellis-ldp/trellis/issues"
            property "sonar.links.scm_dev", "scm:git:git@github.com:trellis-ldp/trellis.git"
            property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
        }
    }

    // Ignore alpha, beta, milestone and release candidates
    dependencyUpdates.resolutionStrategy {
        componentSelection { rules ->
            rules.all { ComponentSelection selection ->
                boolean rejected = ['alpha', 'beta', 'b', 'cr', 'rc', 'm', 'mr'].any { qualifier ->
                    selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
                }
                if (rejected) {
                    selection.reject("Release Candidate")
                }
            }
        }
    }

    task jacocoMerge(type: JacocoMerge) {
        subprojects.findAll { ! omitFromJacocoReporting.contains(it.name) }
                .each { subproj ->
            executionData fileTree(dir: "${subproj.buildDir}/jacoco", include: '*.exec')
            dependsOn subproj.tasks.withType(Test)
        }
    }

    task jacocoRootReport(type: JacocoReport, dependsOn: jacocoMerge) {
        sourceDirectories.from(files(subprojects
                .findAll { ! omitFromJacocoReporting.contains(it.name) }
                .sourceSets.main.allSource.srcDirs))
        classDirectories.from(files(subprojects
                .findAll { ! omitFromJacocoReporting.contains(it.name) }
                .sourceSets.main.output))
        executionData jacocoMerge.destinationFile
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    coveralls {
        sourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
        jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
    }

    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }

    tasks.coveralls {
        dependsOn 'jacocoRootReport'
    }

    task getVersion {
        doLast {
            println project.version
        }
    }
}
