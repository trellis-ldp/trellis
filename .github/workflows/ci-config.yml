name: GitHub CI

on:
  push:
    branches:
      - master
      - trellis-[0-9]+.[0-9]+.x
  pull_request:
    branches:
      - master


jobs:
  validation:
    name: "Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: gradle/wrapper-validation-action@v1.0.3

  build:
    name: Java ${{ matrix.java }} environment
    needs: [validation]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11]

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trellis
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1.3.0
      with:
        java-version: ${{ matrix.java }}

    - name: Cache
      uses: actions/cache@v1.1.2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew check assemble javadoc
      env:
        QUARKUS_DATASOURCE_USERNAME: postgres
        QUARKUS_DATASOURCE_PASSWORD: postgres
        QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://localhost/trellis

  security:
    name: Security analysis
    needs: [validation]
    # Only run security scans for push events
    if: github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Run Snyk to check for vulnerabilities
      env:
        PROJECT_PATH: /project/trellis
        SNYK_ORG: ${{ secrets.SNYK_ORG }}
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # Only run security scans if integration is set up
      run: |
          if [ "$SNYK_ORG" != "" ]; then
            # don't fail the build if snyk doesn't complete successfully
            docker run --name snyk -e SNYK_TOKEN -e PROJECT_PATH -v "/home/runner/work/trellis":"/project" snyk/snyk-cli:gradle-5.4 "monitor --all-sub-projects --org=$SNYK_ORG" || true
          fi

  windows:
    name: Java 11 Windows (triplestore) environment
    needs: [validation]
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11
    - name: Cache
      uses: actions/cache@v1.1.2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      shell: bash
      run: ./gradlew.bat check -Ptriplestore

  quarkusTriplestore:
    name: Java 11 Quarkus (triplestore) environment
    needs: [validation]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: "Java 11 (Quarkus Triplestore)"
      run: ./gradlew check -p platform/quarkus build -Ptriplestore

  quarkusPostgres:
    name: Java 11 Quarkus (postgres) environment
    needs: [validation]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trellis
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: "Java 11 (Quarkus Postgres)"
      run: ./gradlew check -p platform/quarkus build
      env:
        QUARKUS_DATASOURCE_USERNAME: postgres
        QUARKUS_DATASOURCE_PASSWORD: postgres
        QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://localhost/trellis

  dropwizardTriplestore:
    name: Java 11 Dropwizard (triplestore) environment
    needs: [validation]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: "Java 11 (Dropwizard Triplestore)"
      run: ./gradlew check -p platform/dropwizard build
      env:
          TRELLIS_TEST_DATABASE: false

  dropwizardPostgres:
    name: Java 11 Dropwizard (postgres) environment
    needs: [validation]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trellis
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: "Java 11 (Dropwizard Postgres)"
      run: ./gradlew check -p platform/dropwizard build
      env:
          TRELLIS_TEST_JDBC_DRIVER_CLASS: org.postgresql.Driver
          TRELLIS_TEST_JDBC_USER: postgres
          TRELLIS_TEST_JDBC_PASSWORD: postgres
          TRELLIS_TEST_JDBC_URL: jdbc:postgresql://localhost/trellis
          TRELLIS_TEST_TRIPLESTORE: false

  analysis:
    needs: [validation]
    runs-on: ubuntu-latest

    name: Static Analysis

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trellis
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Cache
      uses: actions/cache@v1.1.2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew check jacocoRootReport sonarqube -Dsonar.host.url=https://sonarcloud.io
      env:
        QUARKUS_DATASOURCE_USERNAME: postgres
        QUARKUS_DATASOURCE_PASSWORD: postgres
        QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://localhost/trellis
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  osgi:
    name: Java 11 OSGi environment
    needs: [validation]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11
    - name: Cache
      uses: actions/cache@v1.1.2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew -p platform/osgi check -Posgi

  jpms:
    name: Java 11 JPMS environment
    needs: [validation]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11
    - name: Cache
      uses: actions/cache@v1.1.2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew check install -Pjpms -Ptriplestore

  # Deployments
  dockerhub:
    name: Deploy docker container to DockerHub
    needs: [build]
    runs-on: ubuntu-latest
    # Only run docker deploy on push events
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Publish Docker Container
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        ./buildtools/src/main/resources/docker/publishToDockerHub.sh

  sonatype:
    name: Deploy artifacts to Sonatype
    needs: [build]
    runs-on: ubuntu-latest
    # Only publish on push events
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 8
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 8
    - name: Publish to Sonatype
      run: if [[ $(./gradlew -q getVersion) == *SNAPSHOT* ]]; then ./gradlew publish ; fi
      env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

