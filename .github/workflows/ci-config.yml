name: GitHub CI

on:
  push:
    branches:
      - master
      - trellis-[0-9]+.[0-9]+.x
  pull_request:
    branches:
      - master


jobs:
  validation:
    name: "Validation"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: gradle/wrapper-validation-action@v1

  build:
    needs: [validation]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [8, 11]

    name: Java ${{ matrix.java }} environment
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Cache
      uses: actions/cache@v1.1.0
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew check assemble javadoc -x pmdMain

  security:
    needs: [validation]
    runs-on: ubuntu-latest
    name: Security analysis
    steps:
    - uses: actions/checkout@v2
    - name: Run Snyk to check for vulnerabilities
      # Only run security scans for push events
      if: github.event_name == 'push'
      env:
        PROJECT_PATH: /project/trellis
        SNYK_ORG: ${{ secrets.SNYK_ORG }}
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # Only run security scans if integration is set up
      run: |
          if [ "$SNYK_ORG" != "" ]; then
            # don't fail the build if snyk doesn't complete successfully
            docker run --name snyk -e SNYK_TOKEN -e PROJECT_PATH -v "/home/runner/work/trellis":"/project" snyk/snyk-cli:gradle-5.4 "monitor --all-sub-projects --org=$SNYK_ORG" || true
          fi

  windows:
    needs: [validation]
    runs-on: windows-latest
    name: Java 8 Windows environment
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Cache
      uses: actions/cache@v1.1.0
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      shell: bash
      run: ./gradlew.bat -x pmdMain check

  osgi:
    needs: [validation]
    runs-on: ubuntu-latest
    name: Java 8 OSGi environment
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 8
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: Cache
      uses: actions/cache@v1.1.0
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew -p platform/osgi -x pmdMain check -Posgi

  jpms:
    needs: [validation]
    runs-on: ubuntu-latest
    name: Java 11 JPMS environment
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache
      uses: actions/cache@v1.1.0
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew check install -x pmdMain -Pjpms

