name: GitHub CD

on:
  push:
    branches:
      - main
    tags:
      - trellis-[0-9]+.[0-9]+.[0-9]+

jobs:
  validation:
    name: Gradle Validation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.1.0
      - uses: gradle/wrapper-validation-action@v1.0.3

  build:
    name: Java 11 environment
    runs-on: ubuntu-latest
    needs: [validation]

    services:
      postgres:
        image: postgres:10.8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: trellis
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2.1.0
      with:
        fetch-depth: 0
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Build with Gradle
      run: ./gradlew check assemble javadoc
      env:
        QUARKUS_DATASOURCE_USERNAME: postgres
        QUARKUS_DATASOURCE_PASSWORD: postgres
        QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://localhost/trellis

  security:
    name: Security analysis
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Run Snyk to check for vulnerabilities
      env:
        PROJECT_PATH: /project/trellis
        SNYK_ORG: ${{ secrets.SNYK_ORG }}
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # Only run security scans if integration is set up
      run: |
          if [ "$SNYK_ORG" != "" ]; then
            # don't fail the build if snyk doesn't complete successfully
            docker run --name snyk -e SNYK_TOKEN -e PROJECT_PATH -v "/home/runner/work/trellis":"/project" snyk/snyk-cli:gradle-5.4 "monitor --all-sub-projects --org=$SNYK_ORG" || true
          fi

  sonatype:
    name: Deploy artifacts to Sonatype
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11
    - name: Publish to Sonatype
      run: if [[ $(./gradlew -q getVersion) == *SNAPSHOT* ]]; then ./gradlew publish ; fi
      env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

  dockerhub:
    name: Deploy Docker containers to DockerHub
    needs: [build]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Publish Docker Containers
      run: |
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
        ./buildtools/src/main/resources/docker/publishToDockerHub.sh

  docker:
    needs: [build]
    runs-on: ubuntu-latest

    name: Deploy Docker containers to GitHub
    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Publish Docker Containers
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
        ./buildtools/src/main/resources/docker/publishToGitHub.sh

  cloudsmith:
    name: Deploy released artifacts to Cloudsmith
    needs: [build]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'trellis')

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Build Trellis
      run: ./gradlew assemble

    - name: Install Cloudsmith CLI
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade cloudsmith-cli

    - name: Publish distributions to Cloudsmith
      env:
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_TOKEN }}
      run: |
          export VERSION=$(./gradlew -q getVersion)
          /home/runner/.local/bin/cloudsmith push raw trellisldp/staging \
            --version="${VERSION}" \
            --name="Trellis" \
            --summary="Trellis Linked Data Server" \
            --description="Trellis Linked Data Server" \
            platform/dropwizard/build/distributions/trellis-${VERSION}.zip

  javadocs:
    name: Deploy javadocs to AWS
    needs: [build]
    runs-on: ubuntu-latest
    if: contains(github.ref, 'trellis')

    steps:
    - uses: actions/checkout@v2.1.0
    - name: Set up JDK 11
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11

    - name: Build API documentation
      run: |
          ./gradlew apidocs
          mkdir -p docs/trellis/$(./gradlew -q getVersion)
          mv docs/apidocs/$(./gradlew -q getVersion) docs/trellis/$(./gradlew -q getVersion)/apidocs

    - name: Sync to AWS S3
      uses: jakejarvis/s3-sync-action@v0.5.1
      with:
        args: --acl public-read
      env:
          AWS_S3_BUCKET: ${{ secrets.AWS_DOCS_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SOURCE_DIR: "docs/trellis"
          DEST_DIR: "docs/trellis"

