apply plugin: 'java-library'
apply plugin: 'osgi'

description = 'Trellis IO Module (Jena)'

ext {
    moduleName = 'org.trellisldp.io'
}

dependencies {
    api("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    api("org.glassfish.hk2.external:javax.inject:$javaxInjectVersion")

    api project(':trellis-api')

    implementation("commons-io:commons-io:$commonsIoVersion")
    implementation("org.apache.commons:commons-rdf-jena:$commonsRdfVersion")
    implementation("org.apache.jena:jena-osgi:$jenaVersion")
    implementation("org.apache.tamaya:tamaya-api:$tamayaVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")
    implementation("org.apache.commons:commons-compress:$commonsCompressVersion")
    implementation project(':trellis-vocabulary')

    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")
    testImplementation("org.apache.tamaya:tamaya-core:$tamayaVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
}

jar {
    manifest {
        description project.description
        docURL project.docURL
        vendor project.vendor
        license project.license

        instruction 'Automatic-Module-Name', moduleName
        instruction 'Import-Package', '*'
        instruction 'Export-Package', "${moduleName};version=${projectOsgiVersion}"
        instruction 'Require-Capability', '''\
            osgi.extender;
                filter:="(osgi.extender=osgi.serviceloader.registrar)";
                resolution:=optional,
            osgi.extender;
                filter:="(osgi.extender=osgi.serviceloader.processor)",
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.trellisldp.api.RDFaWriterService)";
                resolution:=optional,
            osgi.serviceloader;
                filter:="(osgi.serviceloader=org.trellisldp.api.NamespaceService)";
                resolution:=optional'''
        instruction 'Provide-Capability', '''\
            osgi.serviceloader;
                osgi.serviceloader=org.trellisldp.api.IOService'''
    }
}

publishing.publications {
    maven(MavenPublication) {
        artifact('build/cfg/main/org.trellisldp.io.cfg') {
            classifier 'configuration'
            extension 'cfg'
        }
    }
}
