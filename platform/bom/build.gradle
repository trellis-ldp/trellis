
dependencies {
    implementation project(':trellis-api')
    implementation project(':trellis-common')
    implementation project(':trellis-http')
    implementation project(':trellis-vocabulary')

    implementation project(':trellis-notification-jackson')
    implementation project(':trellis-notification-jsonb')
    implementation project(':trellis-reactive')

    implementation project(':trellis-jwt')
    implementation project(':trellis-webac')

    implementation project(':trellis-app')
    implementation project(':trellis-audit')
    implementation project(':trellis-cache')
    implementation project(':trellis-cdi')
    implementation project(':trellis-constraint')
    implementation project(':trellis-file')
    implementation project(':trellis-jdbc')
    implementation project(':trellis-jena')
    implementation project(':trellis-namespace')
    implementation project(':trellis-rdfa')
    implementation project(':trellis-test')
    implementation project(':trellis-triplestore')
    implementation project(':trellis-webdav')
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                packaging = 'pom'
            }
            pom.withXml {
                // eliminate test-scoped dependencies
                asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                // copy the dependencies node under dependencyManagement
                def dependencies = new Node(new Node(asNode(), 'dependencyManagement'), 'dependencies')
                asNode().dependencies.dependency.forEach { dep -> new Node(dependencies, 'dependency', dep.value()) }
                dependencies.dependency.forEach { dep -> dep.remove(dep.scope) }
                // remove the dependencies node
                asNode().remove(asNode().dependencies)
            }
            artifacts = []
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

