
dependencies {
    implementation project(':trellis-api')
    implementation project(':trellis-http')
    implementation project(':trellis-vocabulary')

    implementation project(':trellis-amqp')
    implementation project(':trellis-event-jackson')
    implementation project(':trellis-event-jsonb')
    implementation project(':trellis-jms')
    implementation project(':trellis-kafka')
    implementation project(':trellis-reactive')

    implementation project(':trellis-auth-basic')
    implementation project(':trellis-auth-oauth')

    implementation project(':trellis-app')
    implementation project(':trellis-audit')
    implementation project(':trellis-cdi')
    implementation project(':trellis-constraint-rules')
    implementation project(':trellis-dropwizard')
    implementation project(':trellis-file')
    implementation project(':trellis-io-jena')
    implementation project(':trellis-namespaces')
    implementation project(':trellis-rdfa')
    implementation project(':trellis-test')
    implementation project(':trellis-triplestore')
    implementation project(':trellis-webac')
    implementation project(':trellis-webdav')

    implementation project(':trellis-openliberty')
    implementation project(':trellis-quarkus')
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                packaging = 'pom'
            }
            pom.withXml {
                // eliminate test-scoped dependencies
                asNode().dependencies.removeAll { dep -> dep.scope == "test" }
                // copy the dependencies node under dependencyManagement
                def dependencies = new Node(new Node(asNode(), 'dependencyManagement'), 'dependencies')
                asNode().dependencies.dependency.forEach { dep -> new Node(dependencies, 'dependency', dep.value()) }
                dependencies.dependency.forEach { dep -> dep.remove(dep.scope) }
                // remove the dependencies node
                asNode().remove(asNode().dependencies)
            }
            artifacts = []
        }
    }
}

java {
    // because this isn't built as a JPMS module
    if (project.hasProperty("jpms") && JavaVersion.current().isJava11Compatible()) {
        disableAutoTargetJvm()
    }
}
