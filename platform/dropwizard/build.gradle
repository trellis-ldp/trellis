plugins {
    id 'application'
    id 'distribution'
    id 'java-library'
}

description = "Trellis Triplestore Application"

ext {
    moduleName = 'org.trellisldp.app.triplestore'
}

application {
    mainClassName = 'org.trellisldp.app.triplestore.TrellisApplication'
    applicationName = 'trellis'
}

configurations.all {
    exclude group: 'javax.el', module: 'javax.el-api'
}

dependencies {
    implementation("com.github.jsonld-java:jsonld-java:$jsonldVersion") {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient-osgi'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore-osgi'
    }
    implementation "commons-codec:commons-codec:$commonsCodecVersion"
    implementation "io.smallrye.config:smallrye-config:$smallryeConfigVersion"
    implementation "jakarta.activation:jakarta.activation-api:$activationApiVersion"
    implementation "jakarta.jms:jakarta.jms-api:$jmsApiVersion"
    implementation "jakarta.validation:jakarta.validation-api:$validationApiVersion"
    implementation "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"
    implementation "org.apache.activemq:activemq-client:$activeMqVersion"
    implementation "org.apache.jena:jena-arq:$jenaVersion"
    implementation "org.apache.jena:jena-rdfconnection:$jenaVersion"
    implementation "org.apache.jena:jena-tdb2:$jenaVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.apache.commons:commons-rdf-api:$commonsRdfVersion"
    implementation("org.apache.commons:commons-rdf-jena:$commonsRdfVersion") {
        exclude group: 'org.apache.jena', module: 'jena-osgi'
        exclude group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.xerces'
    }

    implementation project(':trellis-constraint-rules')
    implementation project(':trellis-io-jena')
    implementation project(':trellis-api')
    implementation project(':trellis-http')
    implementation project(':trellis-app')
    implementation project(':trellis-cache')
    implementation project(':trellis-dropwizard')
    implementation project(':trellis-vocabulary')
    implementation project(':trellis-file')
    implementation project(':trellis-namespaces')
    implementation project(':trellis-audit')
    implementation project(':trellis-event-jackson')
    implementation project(':trellis-webac')
    implementation project(':trellis-triplestore')
    implementation project(':trellis-jms')
    implementation project(':trellis-rdfa')
    implementation project(':trellis-kafka')
    implementation project(':trellis-auth-oauth')
    implementation project(':trellis-auth-basic')

    implementation "io.dropwizard:dropwizard-core:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-metrics:$dropwizardVersion"
    implementation "io.dropwizard:dropwizard-http2:$dropwizardVersion"

    runtimeOnly "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"

    testImplementation("org.awaitility:awaitility:$awaitilityVersion") {
        exclude group: "org.hamcrest", module: 'hamcrest-core'
        exclude group: 'org.hamcrest', module: 'hamcrest-library'
    }
    testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation project(':trellis-test')
    testImplementation "io.dropwizard:dropwizard-client:$dropwizardVersion"
    testImplementation "io.dropwizard:dropwizard-testing:$dropwizardVersion"
    testImplementation "org.apache.activemq:activemq-broker:$activeMqVersion"
}

jar {
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}

signing {
    sign distTar
    sign distZip
}

task copyDistTask(type: Copy) {
    from '../../LICENSE'
    from 'README.md'
    into 'src/main/dist'
}

assembleDist {
    dependsOn copyDistTask
}

gradle.taskGraph.whenReady({ graph ->
    tasks.withType(AbstractArchiveTask).each { archive ->
        archive.doLast {
            ant.checksum file: archive.archiveFile.get(), algorithm: 'sha-256', format: 'MD5SUM', fileext: '.sha256'
        }
    }
})

java {
    // because this isn't built as a JPMS module
    if (project.hasProperty("jpms") && JavaVersion.current().isJava11Compatible()) {
        disableAutoTargetJvm()
    }
}
