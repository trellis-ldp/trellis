description = """Trellis OSGi"""

repositories {
    mavenCentral()
    mavenLocal() {
        content {
            includeGroup "org.trellisldp"
        }
    }
}

def static randomPort() {
    try {
        ServerSocket server = new ServerSocket()
        server.setReuseAddress(true)
        server.bind(new InetSocketAddress(0))
        int port = server.getLocalPort()
        server.close()
        return port
    } catch (IOException e) {
        throw new IOException('Failed to find random free port', e)
    }
}

configurations {
    karafDistro {
        description = 'Configuration used to isolate the dependency on the Karaf distro'
        transitive = false
    }
}

sonarqube {
    skipProject = !project.hasProperty("osgi")
}

dependencies {
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation "org.apache.karaf.features:org.apache.karaf.features.core:$karafVersion"
    testImplementation "org.apache.jena:jena-osgi:$jenaVersion"
    testImplementation "org.ops4j.pax.exam:pax-exam:$paxExamVersion"
    testImplementation "org.ops4j.pax.exam:pax-exam-junit4:$paxExamVersion"
    testImplementation "org.ops4j.pax.exam:pax-exam-container-karaf:$paxExamVersion"
    testImplementation "org.osgi:osgi.core:$osgiVersion"
    testImplementation "org.osgi:org.osgi.compendium:$osgiCompendiumVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"

    testImplementation "jakarta.inject:jakarta.inject-api:$injectApiVersion"
    testImplementation project(':trellis-api')
    testImplementation project(':trellis-app')
    testImplementation project(':trellis-audit')
    testImplementation project(':trellis-cache')
    testImplementation project(':trellis-cdi')
    testImplementation project(':trellis-constraint')
    testImplementation project(':trellis-file')
    testImplementation project(':trellis-http')
    testImplementation project(':trellis-jdbc')
    testImplementation project(':trellis-jena')
    testImplementation project(':trellis-namespace')
    testImplementation project(':trellis-notification-jackson')
    testImplementation project(':trellis-notification-jsonb')
    testImplementation project(':trellis-triplestore')
    testImplementation project(':trellis-webac')
    testImplementation project(':trellis-karaf')
    testImplementation project(':trellis-vocabulary')

    testRuntimeOnly platform("org.junit:junit-bom:$junitVersion")

    testRuntimeOnly "jakarta.xml.bind:jakarta.xml.bind-api:$jaxbApiVersion"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine"

    karafDistro group: 'org.apache.karaf', name: 'apache-karaf', version: karafVersion, ext: 'zip'
}


task generateDependsFile {
    // This is useful for the org.ops4j.pax.exam.CoreOptions.maven() stuff
    File outputFileDir = project.file( "${project.buildDir}/classes/java/test/META-INF/maven/" )
    File outputFile = new File( outputFileDir, 'dependencies.properties' )
    outputs.file outputFile

    doFirst {
        outputFileDir.mkdirs()
        Properties properties = new Properties()

        // first we add our GAV info
        properties.setProperty( "groupId", "${project.group}" )
        properties.setProperty( "artifactId", project.name )
        properties.setProperty( "version", "${project.version}" )
        properties.setProperty( "${project.group}/${project.name}/version", "${project.version}" )

        // then for all our deps
        project.configurations.testRuntimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
            final String keyBase = it.moduleVersion.id.group + '/' + it.moduleVersion.id.name
            properties.setProperty( "${keyBase}/scope", "compile" )
            properties.setProperty( "${keyBase}/type", it.extension )
            properties.setProperty( "${keyBase}/version", it.moduleVersion.id.version )
        }

        FileOutputStream outputStream = new FileOutputStream( outputFile )
        try {
            properties.store( outputStream, "Generated from Gradle for PaxExam testing" )
        }
        finally {
            outputStream.close()
        }
    }
}

test {
    systemProperty 'karaf.version', karafVersion
    systemProperty 'jena.version', jenaVersion

    systemProperty 'karaf.ssh.port', randomPort()
    systemProperty 'karaf.rmiServer.port', randomPort()
    systemProperty 'karaf.rmiRegistry.port', randomPort()

    enabled = project.hasProperty("osgi")
}

tasks.test.dependsOn tasks.generateDependsFile

rootProject.childProjects.findAll { n, p -> p != project }.each { n, p ->
    if (project.hasProperty("osgi")) {
        tasks.test.dependsOn p.tasks.install
    }
}
