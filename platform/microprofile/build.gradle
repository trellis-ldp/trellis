apply plugin: 'war'
apply plugin: 'liberty'

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.wasdev.wlp.gradle.plugins:liberty-gradle-plugin:2.6.5'
    }
}

ext {
    appName = "trellis"
    testServerHttpPort = 9080
    testServerHttpsPort = 9443
    warContext = appName
}

dependencies {
    compile("com.github.jsonld-java:jsonld-java:$jsonldVersion") {
        exclude group: 'org.apache.httpcomponents', module: 'httpclient-osgi'
        exclude group: 'org.apache.httpcomponents', module: 'httpcore-osgi'
    }
    compile("commons-codec:commons-codec:$commonsCodecVersion")
    compile("javax.activation:javax.activation-api:$activationApiVersion")
    //compile("javax.jms:javax.jms-api:$jmsApiVersion")
    compile("org.apache.activemq:activemq-client:$activeMqVersion")
    compile("org.apache.jena:jena-arq:$jenaVersion")
    compile("org.apache.jena:jena-rdfconnection:$jenaVersion")
    compile("org.apache.jena:jena-tdb2:$jenaVersion")
    compile("org.eclipse.microprofile.config:microprofile-config-api:$microprofileConfigVersion")
    //compile("io.smallrye:smallrye-config:$smallryeVersion")
    compile("org.slf4j:slf4j-api:$slf4jVersion")
    //compile("javax.jms:javax.jms-api:$jmsApiVersion")
    compile("javax.xml.bind:jaxb-api:$jaxbVersion")
    compile("javax.validation:validation-api:$validationVersion")
    compile("org.apache.commons:commons-rdf-api:$commonsRdfVersion")
    compile("org.apache.commons:commons-rdf-jena:$commonsRdfVersion") {
        exclude group: 'org.apache.jena', module: 'jena-osgi'
        exclude group: 'org.apache.servicemix.bundles', module: 'org.apache.servicemix.bundles.xerces'
    }

    compile project(':trellis-constraint-rules')
    compile project(':trellis-io-jena')
    compile project(':trellis-api')
    compile project(':trellis-http')
    compile project(':trellis-vocabulary')
    compile project(':trellis-file')
    compile project(':trellis-namespaces')
    compile project(':trellis-agent')
    compile project(':trellis-app')
    compile project(':trellis-audit')
    compile project(':trellis-event-serialization')
    compile project(':trellis-webac')
    compile project(':trellis-triplestore')
    //compile project(':trellis-jms')
    compile project(':trellis-rdfa')
    //compile project(':trellis-kafka')
    compile project(':trellis-auth-oauth')
    compile project(':trellis-auth-basic')
    compile("ch.qos.logback:logback-classic:$logbackVersion")

    testCompile("org.awaitility:awaitility:$awaitilityVersion") {
        exclude group: "org.hamcrest", module: 'hamcrest-core'
        exclude group: 'org.hamcrest', module: 'hamcrest-library'
    }
    testCompile("org.hamcrest:hamcrest:$hamcrestVersion")
    testCompile("org.mockito:mockito-core:$mockitoVersion")
    testCompile project(':trellis-test')
    testCompile("org.apache.activemq:activemq-broker:$activeMqVersion")

    libertyRuntime group:'io.openliberty', name:'openliberty-runtime', version:'[19.0.0.7,)'
}

liberty {
    server {
        name = "${appName}"
        configFile = file("src/test/liberty/config/server.xml")
        bootstrapProperties = ['default.http.port': testServerHttpPort,
                               'default.https.port': testServerHttpsPort,
                               'app.context.root': warContext]
        packageLiberty {
            archive = "$buildDir/${appName}.zip"
            include = "usr"
        }
    }
}

war {
    archiveName = "${baseName}.${extension}"
}

test {
    systemProperties = ['liberty.test.port': testServerHttpPort, 'war.name': warContext]
}

clean.dependsOn 'libertyStop'
test.dependsOn 'libertyStart'
test.finalizedBy 'libertyStop'
libertyPackage.dependsOn 'libertyStop'

