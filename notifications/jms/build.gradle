plugins {
    id 'java-library'
    id 'biz.aQute.bnd.builder'
    id 'info.solidsoft.pitest'
}

description = 'Trellis JMS'

configurations {
    activemq
}

ext {
    moduleName = 'org.trellisldp.jms'
    testModules = ['smallrye.config', 'org.trellisldp.vocabulary', 'org.trellisldp.event.jackson', 'org.apache.commons.rdf.simple']
}

dependencies {
    api "jakarta.inject:jakarta.inject-api:$injectApiVersion"
    api "jakarta.jms:jakarta.jms-api:$jmsApiVersion"
    api project(':trellis-api')

    implementation "org.eclipse.microprofile.config:microprofile-config-api:$microprofileConfigVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "org.apache.activemq:activemq-client:$activeMqVersion"
    testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
    testImplementation "io.smallrye.config:smallrye-config:$smallryeConfigVersion"
    testImplementation "org.apache.commons:commons-rdf-simple:$commonsRdfVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation project(':trellis-event-jackson')
    testImplementation project(':trellis-vocabulary')

    activemq("org.apache.activemq:activemq-broker:$activeMqVersion") {
        exclude group: "com.fasterxml.jackson.core", module: "jackson-databind"
        exclude group: "org.apache.activemq", module: "activemq-client"
    }

    if (!project.sourceCompatibility.isJava11Compatible()) {
        testImplementation "org.apache.activemq:activemq-broker:$activeMqVersion"
    }
}

pitest {
    testPlugin = 'junit5'
    pitestVersion = pitestToolVersion
    threads = 4
}

if (project.sourceCompatibility.isJava11Compatible()) {
    compileTestJava {
        doFirst {
            options.compilerArgs += [
                '--patch-module', "activemq.client=" + files(configurations.activemq).asPath,
            ]
        }
    }

    test {
        inputs.property("moduleName", moduleName)
        doFirst {
            jvmArgs += [
                '--patch-module', "activemq.client=" + files(configurations.activemq).asPath,
            ]
        }
    }
}
